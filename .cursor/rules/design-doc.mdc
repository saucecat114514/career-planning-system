---
description: design doc
globs: 
alwaysApply: false
---
校园职业成长平台系统需求分析
1. 项目概述
校园职业成长平台是一个面向校内学生的Web应用，旨在帮助学生规划职业发展路径、提升职业技能，并获取行业动态信息。平台采用Spring Boot框架结合Thymeleaf模板引擎开发，实现前后端集成，以提供流畅的用户体验。该系统涵盖职业规划、技能提升、行业洞察三大核心模块，并通过测评报告将规划建议和学习路径呈现给用户。由于平台用于校内教学与指导，部署在校内服务器或本地电脑上，访问范围有限，对安全性要求相对较低。系统在设计时充分考虑未来扩展需求，如引入个性化推荐算法、动态数据可视化等，以便随着需求增长而迭代升级。 (图片说明：登录前首页界面，展示平台简介和主要功能模块导航。)
2. 系统功能模块
系统主要由以下功能模块构成，各模块相对独立又相互联动：
首页模块（含登录前/后首页）：在用户未登录时，首页用于展示平台简介、核心功能导航（职业规划、技能提升、行业洞察），并提供登录入口；用户登录后，首页导航保持相同，但顶部显示用户头像/名称，表示已登录状态，功能模块入口可直接访问。首页旨在引导用户了解平台价值并快速进入各子功能。
登录模块：提供账号和密码输入界面，让用户输入校园统一身份凭据。鉴于项目要求，登录功能仅作前端展示，后端并未实现实际的身份验证逻辑，即模拟登录流程。但模块预留了与数据库的接口，可在未来接入真实的认证机制（如校内LDAP或Spring Security）。
职业规划模块：帮助学生进行职业生涯规划。模块包含三个子功能：职业测评（通过问卷或测试题评估学生的兴趣和性格倾向，匹配适合的职业领域）、路径制定（根据测评结果生成个性化的职业发展路径图，列出从当前到目标职业所需的阶段和任务）、目标管理（允许学生设定具体的职业或学习目标，并跟踪完成进度）。系统能够根据测评数据生成推荐的成长路径，并提供分析功能，帮助学生明确“先认知->再规划->持续学习->数据验证”的成长步骤。
技能提升模块：整合课程资源，提供学生所需技能的学习内容。模块以课程推荐卡片形式展示相关培训课程或实训项目，每个课程卡片包含课程标题、简介、难度/类别标签，以及“加入学习”等操作按钮。学生可以浏览并选择课程加入个人学习计划，平台可跟踪学习进度并在将来依据学生兴趣提供更精准的课程推荐。
行业洞察模块：提供最新的行业趋势和技能需求信息。通过数据可视化，展示各行业的热度趋势图（例如就业机会或薪资走势），以及当前热门技能的词云图。此模块目前以预留占位图表形式呈现，可在未来对接真实的数据源（如就业大数据）以动态更新图表，帮助学生了解目标行业的发展动态和人才需求。
测评报告模块：汇总职业测评结果并生成报告页面。报告包括学生适合的职业领域推荐、性格倾向分析（例如霍兰德职业兴趣理论下的“现实型+探索型”等类型）、以及系统建议的学习和发展路径。报告页面提供行动建议的入口，例如引导用户前往“技能提升”模块学习相关课程，或查看“行业洞察”获取更多该领域的信息。
管理员管理模块（后台管理）：供系统管理员使用的内容管理功能。管理员可以通过后台界面或管理端页面对平台内容进行维护，包括：管理课程信息（新增/修改课程及其描述）、管理测评题库和推荐规则、管理行业数据（上传或更新趋势数据与技能关键字）以及用户账户管理等。该模块确保平台内容持续更新，并支持根据校方需求调整推荐算法和数据来源。
3. 用户角色与权限
系统设定了两类用户角色：普通用户和管理员，两者权限有所区别：
普通用户（学生）：平台主要受众，注册登录后可使用职业规划、技能提升和行业洞察等模块的全部功能。普通用户可以进行职业测评、浏览并制定职业路径，添加课程到个人学习计划，查看行业数据。普通用户的操作权限仅限于自身相关的数据，不具备对全局内容的修改权限。
管理员（系统管理人员）：一般由教师或平台维护人员担任。管理员拥有普通用户的所有浏览权限，并额外拥有内容管理权限。管理员可以通过管理界面对平台数据进行增删改查，包括：发布或更新课程信息，维护测评题目及其结果映射关系，调整推荐路径规则，上传行业趋势数据，以及管理用户账户（如赋予某用户管理员权限）。由于当前登录功能未实现真实验证，可通过预置管理员账户方式模拟；未来如接入正式认证系统，可基于角色字段控制页面访问和操作权限。
4. 数据库设计概要
平台使用MySQL数据库来存储核心数据。主要的数据表及其结构设计简要概述如下：
用户表（user）：存储用户基本信息。字段示例：user_id（主键）, username（用户名/学号）, password（密码哈希）, role（用户角色，如user/admin）, email（邮箱，可选）等。用于区分学生用户和管理员，以及提供未来扩展认证所需的数据字段。
课程表（course）：存储技能提升模块的课程信息。字段示例：course_id（主键）, title（课程名称）, description（课程简介）, category（课程类别/技能方向）, difficulty（难度等级）, url（课程链接或资源路径）等。该表由管理员维护，用于在技能提升模块展示课程列表。
测评题目表（assessment_question）：存储职业测评的题库（如果实现测评问卷）。字段示例：question_id, question_text（题目内容）, type（题目分类）等。题目选项和评分标准可硬编码在前端或另建表。(注：当前版本可能使用固定测评流程，此表可选。)
测评结果表/职业报告表（assessment_result）：存储用户完成职业测评后的结果数据。字段示例：result_id（主键）, user_id（外键关联用户）, recommended_field（推荐职业领域，如“数据分析”）, personality_type（性格倾向类型，如“现实+探索”）, recommended_path（推荐的学习路径概要，如一串课程或阶段的标识）, assessment_date（测评日期）。当用户完成测评后插入一条记录，用于在测评报告页面展示，并支持用户日后查看历史测评结果。
职业路径表（career_path）：存储预定义的职业发展路径信息。字段示例：path_id, field（职业领域，如“数据分析”）, path_steps（路径步骤描述，可能是JSON或多行记录存储各阶段），creator（创建者，管理员）。该表用于定义各职业领域的一般成长路线，供测评结果生成个性化路径时参考。
用户目标表（user_goal）：（可选）存储用户个人设置的职业或学习目标。字段示例：goal_id, user_id, goal_description（目标内容）, target_date（期望完成日期）, status（目标状态）。用户在职业规划模块中设定的目标可记录在此表，以跟踪和提醒。
行业数据表（industry_data）：存储行业洞察模块展示的数据。可能包含多个子表或字段，例如：行业热度数据（按时间的指标，如industry_trend表，字段：行业类别，年份/月份，热度值），技能词云数据（如skill_keyword表，字段：技能关键词，热度或权重）。目前此模块数据可能以静态文件或模拟数据呈现，将来可扩展为定期更新的数据库表。
上述为主要数据表设计，各表通过外键建立关联（如用户与其测评结果、用户与其目标、课程与推荐路径等）。数据库设计遵循第三范式以减少冗余，同时考虑查询效率对部分字段做适当冗余或索引优化。
5. 页面与交互说明
本节说明各页面界面及用户交互流程，对应平台提供的功能模块。
登录前首页
未登录状态下的首页主要展示平台的介绍和功能概览。页面顶部是平台名称和口号（例如“连接校园与职场的智能成长平台”），下方提供三个主要模块的导航入口：“职业规划”、“技能提升”、“行业洞察”。页面中部通过Banner或图文块突出平台的价值主张（如职业规划步骤“先认知->再规划->持续学习->数据验证”），以及引导操作按钮（如“开启职业规划”）鼓励用户开始使用。在页面右上角提供“登录”按钮，提示用户登录以体验完整功能。如果用户未登录就尝试进入其他模块，系统会引导其先登录（当前实现中直接在前端路由控制）。该首页确保新用户了解系统用途，并可快速导航至感兴趣的模块。 (图片说明：登录前首页界面，展示平台简介、导航模块和登录入口。)
登录页面
当用户点击登录按钮后，进入登录页面。该页面包含账号和密码的输入框，以及“登录并开始规划”的提交按钮。界面设计简洁直观，账号一般为学生学号或预设用户名，密码字段采用密文显示。由于后端未实现实际验证逻辑，在演示环境中，输入任意用户名/密码点击登录都会跳转到登录后首页页面（模拟成功登录）。实际应用中可集成学校统一认证或数据库校验用户身份。当前登录页面更多是起到界面演示作用，验证逻辑留待未来扩展。用户登录（即使只是模拟）后，系统会在前端记录登录状态，用于切换首页显示和允许访问受限模块。 (图片说明：登录页面，包含用户名、密码输入和登录按钮。)
登录后首页
用户登录成功后返回首页，此时首页内容与未登录时基本相同，但界面元素有所变化：右上角由原先的“登录”按钮替换为用户头像或“用户”图标，标识当前用户已登录状态。登录后首页继续展示职业规划、技能提升、行业洞察三个模块的导航，供用户点击进入相应功能模块。由于用户已登录，点击各模块将直接进入对应页面（无需再提示登录）。此外，首页可能增加欢迎语或用户姓名显示，使用户有个性化的归属感。例如页面顶部可能显示“欢迎，张三”，同时提供退出登录的选项（当前未实现完整逻辑，仅UI展示）。总的来说，登录后首页旨在提供与登录前一致的导航体验，同时反映用户已登录，以便用户顺畅地进入各功能模块。 (图片说明：登录后首页界面，导航模块与未登录时相同，但右上角显示用户已登录状态。)
职业规划模块页面
职业规划模块页面是平台的核心功能之一。页面通常分为多个区域或步骤，引导用户完成职业测评和规划路径制定。例如界面左侧可能显示步骤导航栏：“1. 职业测评 -> 2. 职业路径 -> 3. 目标管理”。在“职业测评”步骤，用户回答一系列职业兴趣或性格倾向的问题；当前实现可能以固定问卷或模拟结果呈现。完成测评后，系统即时生成分析结果，在“职业路径”步骤展示。该步骤中，平台根据用户测评得到的推荐领域和性格类型，生成匹配的职业发展路径图或列表，包括需要掌握的技能、建议的课程、实践项目等。例如，如果测评推荐领域是“数据分析”，路径可能包括“学习Python数据分析->参与数据分析项目->实习数据分析师”。页面通过进度条或节点图形展示路径。接下来在“目标管理”步骤，用户可从推荐路径中设定个人目标，如“在6个月内获得数据分析师初级证书”，系统记录该目标以便跟踪。职业规划页面支持交互：用户点击“开始测评”按钮进入问卷流程，完成后自动跳转路径结果；在路径/目标部分，用户可以调整或确认自己的计划，并保存记录。总体而言，该页面帮助用户明确职业发展方向，并生成可执行的学习与实践计划。 (图片说明：职业规划模块页面，包含测评问卷入口和根据测评结果生成的职业路径示意。)
技能提升模块页面
技能提升模块页面旨在为用户提供针对其职业目标所需的课程和资源。页面以卡片列表形式呈现推荐课程，每个课程卡片展示课程名称（例如“Python数据分析实战”）、简要描述以及相关标签（如“数据分析”、“实战项目”），还有课程缩略图或图标使版面更生动。每张课程卡片底部提供操作按钮，如“加入学习”或“开始学习”。当用户点击课程卡片或按钮，可进入课程详情（如果有独立页面）或者直接将该课程标记为已加入个人学习计划。在当前实现中，点击“加入学习”可能简单地在前端记录选择状态，呈现选中效果；未来可与用户账户关联，保存学习进度。页面交互设计注重简洁，用户可以滚动浏览推荐课程列表，选择感兴趣的课程。管理员可通过内容管理功能更新此页面显示的课程项，以确保推荐内容的时效性和匹配度。通过技能提升模块，学生能够方便地获取与其职业路径相关的学习资源，实现“持续学习”的目标。 (图片说明：技能提升模块页面，展示课程推荐卡片列表，每个卡片含课程信息及“加入学习”按钮。)
行业洞察模块页面
行业洞察模块页面为用户提供宏观的职场趋势信息。页面包括两个主要可视化组件：行业热度图表和技能需求词云。行业热度图表通常以折线或柱状图形式展示某行业随时间的热度变化指标，例如近几年该领域的招聘需求指数或从业人数变化趋势。技能需求词云则通过不同大小的关键词直观显示该领域当前最需要的技能，词频较高的技能以更大字体呈现。目前页面以静态占位符展示这些图表，主要用于界面示例；但模块已经预留了数据接口，可在将来对接真实的数据源。例如，可通过整合行业报告或招聘网站的数据生成实时更新的图表。一旦数据接入，用户将能够交互查看某一具体年份或细分领域的趋势（如鼠标悬停显示详细数值，点击词云词汇查看相关职位信息等）。行业洞察模块丰富了学生对目标行业的理解，帮助其在制定职业规划和选择技能提升方向时，有数据支撑其决策。 (图片说明：行业洞察模块页面，包含行业热度折线图和技能需求词云示意，当前为占位展示。)
测评报告页面
测评报告页面在用户完成职业测评后自动生成，是对测评结果的总结和行动指导。页面开头清晰地给出推荐职业领域，例如：“适合领域：数据分析”，让用户了解系统判断其兴趣和能力契合的方向。接下来是性格倾向分析，基于测评问卷结果映射出用户的人格类型（例如：“性格倾向：现实型 + 探索型”），这通常引用霍兰德职业兴趣理论等模型，将用户特质与职业类型相关联，使建议更有依据。随后页面列出推荐路径，即系统建议的下一步行动计划。例如：“建议路径：技能提升 -> 实践项目”，表示用户应先完成相关技能课程学习，然后进入项目实践环节。测评报告不仅展示文字结论，还可能通过简单的图标或进度图表现用户在各测评维度的得分。页面底部提供交互按钮，引导用户前往技能提升模块选修推荐课程，或查看行业洞察模块了解数据分析行业趋势。这种设计实现了模块之间的联动：从测评报告直接跳转可执行的后续步骤，形成闭环的用户体验。用户可以下载或打印该报告用于线下职业咨询（如果实现该功能）。总体而言，测评报告页面帮助用户将抽象的测评结果转化为具体的行动方案，使职业规划切实可行。 (图片说明：测评报告页面，展示测评得到的推荐领域、性格类型及后续学习路径，并提供跳转按钮以继续完成规划闭环。)
6. 技术选型与开发环境
后端技术：选择使用Spring Boot框架作为后端开发基础。
Spring Boot作为Spring生态的一部分，能快捷创建独立运行的生产级应用，无需繁琐配置即可开箱即用，并内置嵌入式Tomcat容器，方便部署运行。后端采用Java语言，利用Spring Boot提供的REST控制器和模板引擎支持，实现业务逻辑和页面渲染。数据持久层使用Spring提供的JPA（或MyBatis等方案）与MySQL数据库交互，简化数据库操作。 前端技术：采用Thymeleaf作为模板引擎，与Spring Boot完美整合。Thymeleaf能够在服务端直接渲染HTML页面，并支持在HTML中使用简单的标签语法绑定后端数据，使开发者能够以所见即所得方式设计页面。页面样式使用HTML5/CSS3，结合BootStrap等前端框架，以实现响应式布局和良好用户体验。部分交互效果或数据可视化（如行业洞察的图表）可借助JavaScript库实现，例如ECharts用于绘制动态折线图和词云，丰富前端展示。 数据库：采用MySQL作为数据库管理系统。MySQL是流行的开源关系型数据库，具有高性能和可靠性，足以支撑本项目的数据存储需求。

